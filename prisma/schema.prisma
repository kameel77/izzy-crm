generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  hashedPassword String
  role         UserRole
  fullName     String
  phone        String?
  status       UserStatus @default(ACTIVE)
  partner      Partner?    @relation(fields: [partnerId], references: [id])
  partnerId    String?
  leads        Lead[]      @relation("LeadAssignedUser")
  auditLogs    AuditLog[]
  reminders    Reminder[]  @relation("ReminderAssignedUser")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Partner {
  id         String   @id @default(cuid())
  name       String
  contact    Json?
  status     PartnerStatus @default(ACTIVE)
  slaRules   Json?
  notes      String?
  leads      Lead[]
  users      User[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Lead {
  id               String            @id @default(cuid())
  partner          Partner           @relation(fields: [partnerId], references: [id])
  partnerId        String
  assignedUser     User?             @relation("LeadAssignedUser", fields: [assignedUserId], references: [id])
  assignedUserId   String?
  status           LeadStatus        @default(NEW_LEAD)
  sourceMetadata   Json?
  notes            String?
  leadCreatedAt    DateTime          @default(now())
  claimedAt        DateTime?
  lastContactAt    DateTime?
  nextActionAt     DateTime?
  customerProfile  CustomerProfile?
  vehicleCurrent   VehicleCurrent?
  vehicleDesired   VehicleDesired?
  financingApps    FinancingApplication[]
  documents        Document[]
  offers           Offer[]
  agreement        Agreement?
  reminders        Reminder[]
  auditLogs        AuditLog[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CustomerProfile {
  id             String   @id @default(cuid())
  lead           Lead     @relation(fields: [leadId], references: [id])
  leadId         String   @unique
  firstName      String
  lastName       String
  dateOfBirth    DateTime?
  nationalIdHash String?
  email          String?
  phone          String?
  employmentInfo Json?
  address        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model VehicleCurrent {
  id              String @id @default(cuid())
  lead            Lead   @relation(fields: [leadId], references: [id])
  leadId          String @unique
  make            String?
  model           String?
  year            Int?
  mileage         Int?
  ownershipStatus String?
}

model VehicleDesired {
  id          String @id @default(cuid())
  lead        Lead   @relation(fields: [leadId], references: [id])
  leadId      String @unique
  make        String?
  model       String?
  year        Int?
  budget      Decimal?
  preferences Json?
}

model FinancingApplication {
  id             String        @id @default(cuid())
  lead           Lead          @relation(fields: [leadId], references: [id])
  leadId         String
  bank           String
  loanAmount     Decimal?
  downPayment    Decimal?
  termMonths     Int?
  income         Decimal?
  expenses       Decimal?
  creditScore    Int?
  submittedBy    String?
  submittedAt    DateTime?
  bankReference  String?
  decision       BankDecisionStatus? @default(PENDING)
  decisionAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Document {
  id          String   @id @default(cuid())
  lead        Lead     @relation(fields: [leadId], references: [id])
  leadId      String
  type        String
  filePath    String
  version     Int      @default(1)
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  checksum    String?
  originalName String?
  mimeType    String?
  sizeBytes   Int?
  storageProvider String?
  storageKey  String?
}

model Offer {
  id                    String        @id @default(cuid())
  lead                  Lead          @relation(fields: [leadId], references: [id])
  leadId                String
  title                 String
  url                   String?
  price                 Decimal?
  currency              String?       @default("PLN")
  availabilityStatus    OfferStatus   @default(PENDING)
  availabilityCheckedAt DateTime?
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Agreement {
  id               String         @id @default(cuid())
  lead             Lead           @relation(fields: [leadId], references: [id])
  leadId           String         @unique
  version          Int            @default(1)
  draftFilePath    String?
  signatureStatus  SignatureStatus @default(DRAFT)
  signedFilePath   String?
  signedAt         DateTime?
  signatureMethod  String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  lead       Lead     @relation(fields: [leadId], references: [id])
  leadId     String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  action     String
  field      String?
  oldValue   Json?
  newValue   Json?
  metadata   Json?
  createdAt  DateTime @default(now())
}

model Reminder {
  id              String    @id @default(cuid())
  lead            Lead      @relation(fields: [leadId], references: [id])
  leadId          String
  assignedUser    User?     @relation("ReminderAssignedUser", fields: [assignedUserId], references: [id])
  assignedUserId  String?
  dueAt           DateTime
  description     String
  status          ReminderStatus @default(OPEN)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LeadStatusReference {
  id          String     @id @default(cuid())
  code        LeadStatus @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum UserRole {
  PARTNER
  OPERATOR
  SUPERVISOR
  ADMIN
  AUDITOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  INVITED
}

enum PartnerStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum LeadStatus {
  NEW_LEAD
  LEAD_TAKEN
  GET_INFO
  WAITING_FOR_BANK
  WAITING_FOR_APPROVAL
  BANK_REJECTED
  CLIENT_ACCEPTED
  CLIENT_REJECTED
  AGREEMENT_SIGNED
}

enum BankDecisionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OfferStatus {
  PENDING
  AVAILABLE
  UNAVAILABLE
  RESERVED
}

enum SignatureStatus {
  DRAFT
  SENT
  SIGNED
  CANCELLED
}

enum ReminderStatus {
  OPEN
  COMPLETED
  CANCELLED
}
